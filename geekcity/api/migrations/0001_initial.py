# Generated by Django 2.1.7 on 2019-03-29 05:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='用户名只能是手机号', max_length=64, unique=True, verbose_name='用户名')),
                ('nickname', models.CharField(blank=True, max_length=12, null=True, verbose_name='昵称')),
                ('password', models.CharField(max_length=64, verbose_name='密码')),
                ('uid', models.CharField(help_text='微信用户绑定和CC视频统计', max_length=64, unique=True)),
                ('openid', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'verbose_name': '账户',
                'verbose_name_plural': '账户',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, verbose_name='标题')),
                ('article_type', models.SmallIntegerField(choices=[(0, '学习笔记'), (1, '技术分享'), (2, '心情随笔')], default=0)),
                ('brief', models.TextField(max_length=512, verbose_name='摘要')),
                ('head_img', models.CharField(blank=True, max_length=255, null=True)),
                ('content', models.TextField(verbose_name='文章正文')),
                ('pub_date', models.DateTimeField(verbose_name='发布时间')),
                ('status', models.SmallIntegerField(choices=[(0, '公开'), (1, '隐藏')], default=0, verbose_name='状态')),
                ('comment_num', models.SmallIntegerField(default=0, verbose_name='评论数')),
                ('agree_num', models.SmallIntegerField(default=0, verbose_name='点赞数')),
                ('view_num', models.SmallIntegerField(default=0, verbose_name='阅读数')),
                ('collect_num', models.SmallIntegerField(default=0, verbose_name='收藏数')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('position', models.SmallIntegerField(choices=[(0, '信息流'), (1, 'banner大图'), (2, 'banner小图')], default=0, verbose_name='位置')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Account', verbose_name='作者')),
            ],
            options={
                'verbose_name_plural': '17. 文章',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Account')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': '18. 通用收藏表',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('content', models.TextField(max_length=1024)),
                ('disagree_number', models.IntegerField(default=0, verbose_name='踩')),
                ('agree_number', models.IntegerField(default=0, verbose_name='赞同数')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Account', verbose_name='用户名')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.ContentType', verbose_name='类型')),
                ('p_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.Comment', verbose_name='父级评论')),
            ],
            options={
                'verbose_name_plural': '19. 通用评论表',
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='活动名称')),
                ('brief', models.TextField(blank=True, null=True, verbose_name='优惠券介绍')),
                ('coupon_type', models.SmallIntegerField(choices=[(0, '立减券'), (1, '满减券'), (2, '折扣券')], default=0, verbose_name='券类型')),
                ('money_equivalent_value', models.IntegerField(blank=True, null=True, verbose_name='等值货币')),
                ('off_percent', models.PositiveSmallIntegerField(blank=True, help_text='只针对折扣券，例7.9折，写79', null=True, verbose_name='折扣百分比')),
                ('minimum_consume', models.PositiveIntegerField(blank=True, default=0, help_text='仅在满减券时填写此字段', null=True, verbose_name='最低消费')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='可以把优惠券跟课程绑定', null=True, verbose_name='绑定课程')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='数量(张)')),
                ('open_date', models.DateField(verbose_name='优惠券领取开始时间')),
                ('close_date', models.DateField(verbose_name='优惠券领取结束时间')),
                ('valid_begin_date', models.DateField(blank=True, null=True, verbose_name='有效期开始时间')),
                ('valid_end_date', models.DateField(blank=True, null=True, verbose_name='有效结束时间')),
                ('coupon_valid_days', models.PositiveIntegerField(blank=True, help_text='自券被领时开始算起', null=True, verbose_name='优惠券有效期（天）')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': '31. 优惠券生成记录',
            },
        ),
        migrations.CreateModel(
            name='CouponRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=64, unique=True)),
                ('status', models.SmallIntegerField(choices=[(0, '未使用'), (1, '已使用'), (2, '已过期')], default=0)),
                ('get_time', models.DateTimeField(help_text='用户领取时间', verbose_name='领取时间')),
                ('used_time', models.DateTimeField(blank=True, null=True, verbose_name='使用时间')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Account', verbose_name='拥有者')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Coupon')),
            ],
            options={
                'verbose_name_plural': '32. 用户优惠券',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('course_img', models.CharField(max_length=255)),
                ('course_type', models.SmallIntegerField(choices=[(0, '专栏'), (1, '视频课'), (2, '微课')])),
                ('brief', models.TextField(max_length=2048, verbose_name='课程（模块）概述')),
                ('status', models.SmallIntegerField(choices=[(0, '更新中'), (1, '更新完成')], default=0)),
                ('template_id', models.SmallIntegerField(default=1, help_text='前端模板应该是分为文字和视频两种展示类型', verbose_name='前端模板id')),
            ],
            options={
                'verbose_name_plural': '06.专题课或学位课模块',
            },
        ),
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name_plural': '课程分类',
            },
        ),
        migrations.CreateModel(
            name='CourseChapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.SmallIntegerField(default=1, verbose_name='第几章')),
                ('name', models.CharField(max_length=128)),
                ('summary', models.TextField(blank=True, null=True, verbose_name='章节介绍')),
                ('pub_date', models.DateField(auto_now_add=True, verbose_name='发布日期')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coursechapters', to='api.Course')),
            ],
            options={
                'verbose_name_plural': '10. 课程章节',
            },
        ),
        migrations.CreateModel(
            name='CourseDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours', models.IntegerField(verbose_name='课时')),
                ('course_slogan', models.CharField(blank=True, max_length=125, null=True)),
                ('video_brief_link', models.CharField(blank=True, max_length=255, null=True, verbose_name='课程介绍')),
                ('why_study', models.TextField(verbose_name='为什么学习这门课程')),
                ('what_to_study_brief', models.TextField(verbose_name='我将学到哪些内容')),
                ('career_improvement', models.TextField(verbose_name='此项目如何有助于我的职业生涯')),
                ('prerequisite', models.TextField(max_length=1024, verbose_name='课程先修要求')),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Course')),
                ('recommend_courses', models.ManyToManyField(blank=True, related_name='recommend_by', to='api.Course')),
            ],
            options={
                'verbose_name_plural': '07.课程或学位模块详细',
            },
        ),
        migrations.CreateModel(
            name='CourseOutline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(default=1)),
                ('title', models.CharField(max_length=128)),
                ('content', models.TextField(max_length=2048, verbose_name='内容')),
                ('course_detail', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.CourseDetail')),
            ],
            options={
                'verbose_name_plural': '09. 课程大纲',
            },
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about_teacher', models.FloatField(default=0, verbose_name='讲师讲解是否清晰')),
                ('about_video', models.FloatField(default=0, verbose_name='内容实用')),
                ('about_course', models.FloatField(default=0, verbose_name='课程内容通俗易懂')),
                ('review', models.TextField(max_length=1024, verbose_name='评价')),
                ('disagree_number', models.IntegerField(default=0, verbose_name='踩')),
                ('agree_number', models.IntegerField(default=0, verbose_name='赞同数')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='评价日期')),
                ('is_recommend', models.BooleanField(default=False, verbose_name='热评推荐')),
                ('hide', models.BooleanField(default=False, verbose_name='不在前端页面显示此条评价')),
            ],
            options={
                'verbose_name_plural': '13. 课程评价（购买课程后才能评价）',
            },
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('order', models.PositiveSmallIntegerField(help_text='建议每个课时之间空1至2个值，以备后续插入课时', verbose_name='课时排序')),
                ('section_type', models.SmallIntegerField(choices=[(0, '文档'), (1, '练习'), (2, '视频')], default=2)),
                ('section_link', models.CharField(blank=True, help_text='若是video，填vid,若是文档，填link', max_length=255, null=True)),
                ('video_time', models.CharField(blank=True, max_length=32, null=True, verbose_name='视频时长')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='发布时间')),
                ('free_trail', models.BooleanField(default=False, verbose_name='是否可试看')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coursesections', to='api.CourseChapter')),
            ],
            options={
                'verbose_name_plural': '11. 课时',
            },
        ),
        migrations.CreateModel(
            name='EnrolledCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_date', models.DateTimeField(auto_now_add=True)),
                ('valid_begin_date', models.DateField(verbose_name='有效期开始自')),
                ('valid_end_date', models.DateField(verbose_name='有效期结束至')),
                ('status', models.SmallIntegerField(choices=[(0, '已开通'), (1, '已过期')], default=0)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
                ('course', models.ForeignKey(limit_choices_to=models.Q(_negated=True, course_type=2), on_delete=django.db.models.deletion.DO_NOTHING, to='api.Course')),
            ],
            options={
                'verbose_name_plural': '34. 报名专题课',
            },
        ),
        migrations.CreateModel(
            name='OftenAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField(max_length=1024)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': '08. 常见问题',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.SmallIntegerField(choices=[(0, '微信'), (1, '支付宝'), (2, '优惠码'), (3, '贝里')])),
                ('payment_number', models.CharField(blank=True, max_length=128, null=True, verbose_name='支付第3方订单号')),
                ('order_number', models.CharField(max_length=128, unique=True, verbose_name='订单号')),
                ('actual_amount', models.FloatField(verbose_name='实付金额')),
                ('status', models.SmallIntegerField(choices=[(0, '交易成功'), (1, '待支付'), (2, '退费申请中'), (3, '已退费'), (4, '主动取消'), (5, '超时取消')], verbose_name='状态')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='订单生成时间')),
                ('pay_time', models.DateTimeField(blank=True, null=True, verbose_name='付款时间')),
                ('cancel_time', models.DateTimeField(blank=True, null=True, verbose_name='订单取消时间')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Account')),
            ],
            options={
                'verbose_name_plural': '37. 订单表',
            },
        ),
        migrations.CreateModel(
            name='OrderDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('original_price', models.FloatField(verbose_name='课程原价')),
                ('price', models.FloatField(verbose_name='折后价格')),
                ('content', models.CharField(blank=True, max_length=255, null=True)),
                ('valid_period_display', models.CharField(max_length=32, verbose_name='有效期显示')),
                ('valid_period', models.PositiveIntegerField(verbose_name='有效期(days)')),
                ('memo', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.ContentType')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Order')),
            ],
            options={
                'verbose_name_plural': '38. 订单详细',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('role', models.SmallIntegerField(choices=[(0, '讲师'), (1, '导师')], default=0)),
                ('title', models.CharField(max_length=64, verbose_name='职位、职称')),
                ('signature', models.CharField(blank=True, help_text='导师签名', max_length=255, null=True)),
                ('image', models.CharField(max_length=128)),
                ('brief', models.TextField(max_length=1024)),
            ],
            options={
                'verbose_name_plural': '04.导师或讲师',
            },
        ),
        migrations.CreateModel(
            name='UserAuthToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=64, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
            ],
        ),
        migrations.AddField(
            model_name='enrolledcourse',
            name='order_detail',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='api.OrderDetail'),
        ),
        migrations.AddField(
            model_name='coursereview',
            name='enrolled_course',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.EnrolledCourse'),
        ),
        migrations.AddField(
            model_name='coursedetail',
            name='teachers',
            field=models.ManyToManyField(to='api.Teacher', verbose_name='课程讲师'),
        ),
        migrations.AddField(
            model_name='course',
            name='sub_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.CourseCategory'),
        ),
        migrations.AlterUniqueTogether(
            name='orderdetail',
            unique_together={('order', 'content_type', 'object_id')},
        ),
        migrations.AlterUniqueTogether(
            name='oftenaskedquestion',
            unique_together={('content_type', 'object_id', 'question')},
        ),
        migrations.AlterUniqueTogether(
            name='coursesection',
            unique_together={('chapter', 'section_link')},
        ),
        migrations.AlterUniqueTogether(
            name='courseoutline',
            unique_together={('course_detail', 'title')},
        ),
        migrations.AlterUniqueTogether(
            name='coursechapter',
            unique_together={('course', 'chapter')},
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together={('content_type', 'object_id', 'account')},
        ),
    ]
